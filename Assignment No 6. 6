{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-1-d280a1c6454d>, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-1-d280a1c6454d>\"\u001b[1;36m, line \u001b[1;32m4\u001b[0m\n\u001b[1;33m    define a class with attributes and methods, which you will then call.\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "# Assignment No. 6\n",
    "\n",
    "# Question No.1\n",
    " define a class with attributes and methods, which you will then call.\n",
    "\n",
    "    \n",
    "\n",
    "# Question No.2\n",
    "\n",
    "Python offers a number of benefits compared to other programming languages like Java, C++ or R. \n",
    "It's a dynamic language, with high-level data types. This means that development happens much faster than with Java or C++.\n",
    "It does not require the programmer to declare types of variables and arguments. \n",
    "This also makes Python easier to understand and learn for beginners, its code being more readable and intuitive.\n",
    "\n",
    "# Question No.3\n",
    "\n",
    "The only major difference is that we call Python method on an object, \n",
    "but it’s not the same with functions. Also, methods may modify an object; Python functions don’t.\n",
    "\n",
    "\n",
    "# Question No. 4\n",
    "\n",
    "# Class:\n",
    "\n",
    "The class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods.\n",
    "For example: if you have an employee class then it should contain an attribute and method,\n",
    "i.e. an email id, name, age, salary, etc.\n",
    "\n",
    "\n",
    "# Object :\n",
    "\n",
    "The object is an entity that has state and behavior. It may be any real-world object like the mouse, keyboard, chair,\n",
    "table, pen, etc.\n",
    "\n",
    "Everything in Python is an object, and almost everything has attributes and methods.\n",
    "All functions have a built-in attribute __doc__, which returns the doc string defined in the function source code.\n",
    "\n",
    "# \n",
    "\n",
    "# Question No. 5\n",
    "\n",
    "\n",
    "class Car:\n",
    "    # methode declared in which three instances call by itself\n",
    "    def __init__(self, verifiedLicence, unverifiedLicence, noLicence):\n",
    "        self.verifiedLicence = verifiedLicence # instance\n",
    "        self.unverifiedLicence = unverifiedLicence # instance\n",
    "        self.noLicence = noLicence # instance\n",
    "color = Car('red','green','blue')\n",
    "model = Car('gli','xli','vxr')\n",
    "name = Car('corola','mehran','cultus')\n",
    "company = Car('toyota','pejaro','hilux')\n",
    "year = Car(2018,2019,2020)\n",
    "print(color.verifiedLicence)\n",
    "print(color.unverifiedLicence)\n",
    "print(color.noLicence)\n",
    "print('\\n')\n",
    "print(model.verifiedLicence)\n",
    "print(model.unverifiedLicence)\n",
    "print(model.noLicence)\n",
    "print('\\n')\n",
    "print(name.verifiedLicence)\n",
    "print(name.unverifiedLicence)\n",
    "print(name.noLicence)\n",
    "print('\\n')\n",
    "print(company.verifiedLicence)\n",
    "print(company.unverifiedLicence)\n",
    "print(company.noLicence)\n",
    "print('\\n')\n",
    "print(year.verifiedLicence)\n",
    "print(year.unverifiedLicence)\n",
    "print(year.noLicence)\n",
    "\n",
    "print('{} {} {}'.format) # printing output of the whole program"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
